/*
 *
 *  MIT License
 *
 *  (C) Copyright 2021-2025 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('cms-meta-tools') _
@Library('csm-shared-library') __

def pyImage = 'artifactory.algol60.net/csm-docker/stable/csm-docker-sle-python'

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        disableConcurrentBuilds()
        timeout(time: 90, unit: 'MINUTES')
        timestamps()
    }

    environment {
        NAME = "cfs-state-reporter"
        DESCRIPTION = "Cray Management System - Configuration Framework Operator"
        IS_STABLE = getBuildIsStable()
        BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
        PY_VERSION = "3.6"
        PRIMARY_NODE = "${env.NODE_NAME}"
    }

    stages {
        stage("Clone cms_meta_tools repo") {
            steps {
                // This function is defined in cms-meta-tools:vars/cloneCMSMetaTools.groovy
                cloneCMSMetaTools()
            }
        }

        stage("Set Versions") {
            steps {
                // This function is defined in cms-meta-tools:vars/setVersionFiles.groovy
                setVersionFiles()
            }
        }

        stage("runBuildPrep") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'artifactory-algol60-readonly', passwordVariable: 'ARTIFACTORY_PASSWORD', usernameVariable: 'ARTIFACTORY_USERNAME')]) {
                    sh "make runbuildprep"
                }
            }
        }

        stage("Prep") {
            steps {
                sh "make lint"

                echo "RPM build metadata is ${env.BUILD_METADATA}"
                runLibraryScript("addRpmMetaData.sh", "")

                // Just using this as a means to generate the netrc file that we need
                getDockerBuildArgs()

                sh "make rpm_pre_clean"
            }
        }

        stage("Prepare") {
            steps {

            }
        }

        stage('Build & Publish RPMs') {
            matrix {
                axes {
                    axis {
                        name 'ARCH'
                        values 'x86_64', 'aarch64'
                    }
                }

                environment {
                    DOCKER_ARCH = sh(returnStdout: true, script: "[ ${ARCH} == 'x86_64' ] && echo -n 'amd64' || echo -n 'arm64'")
                    BUILD_DIR = "${env.WORKSPACE}/dist/rpmbuild/${ARCH}"
                }

                stages {

                    stage('Build: setup') {
                        steps {
                            lock('docker-image-pull') {
                                sh "docker pull --platform linux/${DOCKER_ARCH} ${pyImage}:${PY_VERSION}-SLES15.5"
                                sh "docker tag ${pyImage}:${PY_VERSION}-SLES15.5 ${pyImage}:${DOCKER_ARCH}"
                            }
                        }
                    }

                    stage('Build: RPMs') {
                        agent {
                            docker {
                                label "${PRIMARY_NODE}"
                                reuseNode true
                                args "-v /home/jenkins/.ssh:/home/jenkins/.ssh --platform linux/${DOCKER_ARCH}"
                                image "${pyImage}:${DOCKER_ARCH}"
                            }
                        }
                        steps {
                            sh "make rpm"
                        }
                    }

                    stage('Publish: RPMs') {

                        agent {
                            docker {
                                label "${PRIMARY_NODE}"
                                reuseNode true
                                args "-v /home/jenkins/.ssh:/home/jenkins/.ssh --platform linux/${DOCKER_ARCH}"
                                image "${pyImage}:${DOCKER_ARCH}"
                            }
                        }
                        steps {
                            script {
                                publishCsmRpms(
                                        arch: "${ARCH}",
                                        component: env.NAME,
                                        isStable: env.IS_STABLE,
                                        os: "noos",
                                        pattern: "dist/rpmbuild/${ARCH}/RPMS/${ARCH}/*.rpm",
                                )
                                publishCsmRpms(
                                        arch: "src",
                                        component: env.NAME,
                                        isStable: env.IS_STABLE,
                                        os: "noos",
                                        pattern: "dist/rpmbuild/${ARCH}/SRPMS/*.rpm",
                                )
                        }
                    }
                }
            }
        }


        stage('Publish RPM') {
            steps {
                script {
                    publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/RPMS/noarch/*.rpm", os: "noos", arch: "noarch", isStable: )
                    publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/SRPMS/*.rpm", os: "noos", arch: "src", isStable: env.IS_STABLE)
                }
            }
        }
    }
}
