@Library('csm-shared-library') _

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timestamps()
    }

    environment {
        NAME = "cfs-state-reporter"
        DESCRIPTION = "Cray Management System - Configuration Framework Operator"
        IS_STABLE = getBuildIsStable()
        BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
        PUBLISH_SP2 = "sle-15sp2"
        PUBLISH_SP3 = "sle-15sp3"
    }

    stages {
        stage("Clone cms_meta_tools repo") {
            steps {
                withCredentials([gitUsernamePassword(credentialsId: 'jenkins-algol60-cray-hpe-github-integration')]) {
                    sh "git clone --depth 1 --no-single-branch https://github.com/Cray-HPE/cms-meta-tools.git ./cms_meta_tools"
                }
            }
        }

        stage("Set Versions") {
            steps {
                script {
                    // Get version from version.py
                    def ver = sh(returnStdout: true, script: "./cms_meta_tools/version.py").trim()
                    echo "Base version is ${ver}"

                    // Write base version to .version
                    writeFile(file: ".version", text: ver)
                }
            }
        }

        stage("runBuildPrep") {
            steps {
                sh "make runbuildprep"
            }
        }

        stage("Lint") {
            steps {
                sh "make lint"
            }
        }

        stage("Add RPM Metadata") {
            steps {
                echo "RPM build metadata is ${env.BUILD_METADATA}"
                runLibraryScript("addRpmMetaData.sh", "")
            }
        }

        stage("Prepare") {
            steps {
                sh "make prepare"
            }
        }

        stage("Build SP2") {
            agent {
                docker {
                    image "arti.dev.cray.com/dstbuildenv-docker-master-local/cray-sle15sp2_build_environment:latest"
                    reuseNode true
                    // Support docker in docker for clamav scan
                    args "-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker --group-add 999"
                }
            }
            steps {
                sh "make rpm"
            }
        }

        stage('Publish SP2') {
            steps {
                script {
                    publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/RPMS/x86_64/*.rpm", os: env.PUBLISH_SP2, arch: "x86_64", isStable: env.IS_STABLE)
                    publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/SRPMS/*.rpm", os: env.PUBLISH_SP2, arch: "src", isStable: env.IS_STABLE)
                }
            }
        }

        stage("Build SP3") {
            agent {
                docker {
                    image "arti.dev.cray.com/dstbuildenv-docker-master-local/cray-sle15sp3_build_environment:latest"
                    reuseNode true
                    // Support docker in docker for clamav scan
                    args "-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker --group-add 999"
                }
            }
            steps {
                sh "make rpm"
            }
        }

        stage('Publish SP3') {
            steps {
                script {
                    publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/RPMS/x86_64/*.rpm", os: env.PUBLISH_SP3, arch: "x86_64", isStable: env.IS_STABLE)
                    publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/SRPMS/*.rpm", os: env.PUBLISH_SP3, arch: "src", isStable: env.IS_STABLE)
                }
            }
        }
    }
}
